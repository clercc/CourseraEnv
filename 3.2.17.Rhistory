<<<<<<< HEAD:.Rhistory
libPqths()
libPaths()
install.packages("manipulate")
install.packages("slidify","devtools","qqplot2")
install.packages("devtools")
install.packages("qqplot2")
install.packages(installr)
install.packages("installr"")
install.packages("installr")
updateR()
library(installr)
updateR()
installed.packages()
install.packages("qqplot2")
install.packages("qqplot2")
install.packages("devtools")
install.packages("slidify")
install.packages("ggplot2")
install.packages("slidify")
library(xlsx)
install.packages(httr)
install.packages("httr")
library(httr)
myapp = oauth_app("R Quiz", key = "bcbd7703cd342a40d80a" , secret = "039efcbcf65c0642a65c4c2e246c98223873e006")
sig = sign_oauth1.0(myapp, token = "1b1cbe50738103f83f0ea6f7c25624ecafae3fa3")
sig
homeGL = GET("https://api.github.com/users/jtleek/repos", sig)
homeGL
install.packages("sqldf")
packages <- c("data.table", "sqldf")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
setInternet2(TRUE)
require(httpuv)
require(jsonlite)
install.packages("httpuv")
require(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("R Quiz", "bcbd7703cd342a40d80a", secret = "039efcbcf65c0642a65c4c2e246c98223873e006")
github_token <- oauth2.0_token(oauth_endpoints("github", myapp))
myapp <- oauth_app("R Quiz", "bcbd7703cd342a40d80a", secret = "039efcbcf65c0642a65c4c2e246c98223873e006")
github_token <- oauth2.0_token(oauth_endpoints("github", myapp))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?download.file
getwd()
ls()
setwd("C:/Users/Christian/Github/datasciencecoursera")
acs <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", getwd)
acs <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "C:/Users/Christian/Github/datasciencecoursera")
?download.file
acs <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "C:/Users/Christian/Github/datasciencecoursera", mode = "wb")
acs <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "C:/Users/Christian/Github/datasciencecoursera", mode = "wb")
acs <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "C:/Users/Christian/Github/datasciencecoursera/acs.csv", mode = "wb")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
nchar(htmlCode[c(10,20,30,100),])
nchar(htmlCode[c(10,20,30,100)]
)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
?read.fwf
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), widths = c("9,8,8,9"))
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), widths = c("12,7,4,9,4,9,4,9,4"))
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip = 4, widths = c(12,7,4,9,4,9,4,9,4))
x
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip = 4, widths = c(1,7,4,9,4,9,4,9,4))
x
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip = 4,
widths = c(10,7,4,9,4,9,4,9,4))
x
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip = 4,
widths = c(10,7,4,9,4,9,4,9,4))
head(x)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip = 4,
widths = c(12,7,4,9,4,9,4,9,4))
head(x)
x[4,9]
sum(x[,4])
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[X$var1 <= 3 & X$var3> 11,]
X[X$var1 <= 3 | X$var3> 15,]
X[which(X$var2 > 8)]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
sort(X$var2, na.last = NA)
sort(X$var2)
X[order(X$var1),]
X[order(X$var1,X$var3),]
X[order(X$var2,X$var3),]
X[order(X$var2),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 = rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
Y <- cbind(rnorm(5),X)
Y
Y <- rbind(X,rnorm(5))
Y
Y <- rbind(rnorm(5),X)
Y
source('~/.active-rstudio-document', echo=TRUE)
head(restData)
fileURL <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileURL,"./data/restaurants.csv", method = "curl")
restData <- read.csv("./data/restaurants.csv")
=======
<<<<<<< HEAD
install.packages(c("car", "cluster", "codetools", "foreign", "lattice", "lmtest", "Matrix", "mgcv", "nlme", "plm", "quantreg", "Rcpp", "RcppEigen", "SparseM", "survival", "tseries", "urca", "zoo"))
install.packages(c("slidify","ggplt2","devtools"))
install.packages(ggplot2")
install.packages("ggplot2")
install.packages("kernsmooth")
yes
install.packages(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
class(flags)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
View(viewinfo)
View(flags)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
x = 3
x = c(1,2,3)
mean() x
y <- NULL
y <- 38
mean(x) y
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)){
message("getting inverted maxtrix")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
b <- [1:2,3:4]
b <- c[1:2,3:4]
b <- as.matrix()[1:2,3:4]
b <- as.matrix([1:2,3:4])
b <- as.matrix(1:2,3:4)
b
b <- as.matrix(2:2,4:$)
b <- as.matrix(2:2,4:4)
b
b <- as.matrix(2:2)
b
b <- as.matrix(c(1,2,3,4))
b
b <- as.matrix(c(1,2,3,4),2:2)
b
b <- as.matrix(c([1,2],[3,4]))
b <- as.matrix(c(1,3),c(2,4))
b
?as.matrix
d <- c(1,2,3,4)
b <- as.matrix(d,2,2)
b
b <- as.matrix(d,nrow = 2, ncol = 2)
b
b <- as.matrix(,nrow = 2, ncol = 2)
b <- as.matrix(a ,nrow = 2, ncol = 2)
a <- c(1,3)
b <- c(2,4)
cbind(a,b)
d <- cbind(a,b)
class(d)
makeCacheMatrix(d)
cacheSolve(d)
akeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
rm(akeVector())
rm(akeVector
)
rm(cachemean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
t <- c(1,2,3,4,5)
cachemean(t)
solve(d)
cachemean(5)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
l(10)
m(20)
rm(l, m)
rm(a, b, t, d)
n <- function(x) x / 2
o <- function() {
n <- 10
n(n)
}
n(6)
o()
n(o)
rm(n,o)
?<<-
??<<-
??"<<-"
?"<<-"
?assignOps
a <- makeCacheMatrix()
a
a$set(matrix(1:4,2,2))
a
a$get()
cachesolve(a)
cacheSolve(a)
a$set(matrix(1:25,5,5))
cacheSolve(a)
a$set(matrix(1:16,4,4))
cacheSolve(a)
a$set(matrix(1:9,3,3))
cacheSolve(a)
a$set(matrix(2:10,3,3))
cacheSolve(a)
a$set(matrix(4:7,2,2))
cacheSolve(a)
a$set(matrix(c(1,3,5,7),2,2))
cacheSolve(a)
b <- matrix(c(seq(2:20, by = 2),3,3))
b <- matrix(c(seq(2:20, by = 2)),3,3)
a <- diag(5,5)
m <- makeCacheMatrix(a)
cacheSolve(m)
r = rnorm(100000)
m1 = matrix(r, nrow = 1000, ncol= 1000)
m = makeCacheMatrix(m1)
cacheSolve(m)
library(iris)
install.packages(iris)
library(datasets)
data(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
set.seed(1)
rpois(5, 2)
rpois
system.time
setwd(/github)
setwd("~/Github/datasciencecoursera")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = 'character')
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11] - as.numeric(outcome[,11])
hist(outcome[,11],bins = 10)
hist(outcome[,11])
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
hist(outcome[, 11], bins = 50)
hist(outcome[, 11], bin = 50)
hist(outcome[, 11], bin = 15)
hist
?hist
hist(outcome[, 11], breaks = 15)
hist(outcome[, 11], breaks = 50)
?lapply
data <- read.csv("C:/users/clercc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
data <- read.csv("C:/users/clercc/my documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data$state
statelist
data
names(data)
statelist <- data[,7]
statelist
statelist <- invisible(sapply(data[,7],unique))
statelist
statelist <- data[,7]
outcomelist <- names(data[,c(11,17,23)])
outcomelist
outcomelist <- c("heart attack", "heart failure", "pneumonia")
outcomelist
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
print(state, outcome)
}
}
best("TX","heart attack")
"TX" %in% statelist
state <- "TX"
print(state)
best("TX","heart attack")
"heart attack" %in% outcomelist
"TX" %in% statelist & "heart attack" %in% outcomelist
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
print(state, outcome)
}
else {
print("please check your input")
}
}
best("TX","heart attack")
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
print("state", "outcome")
}
else {
print("please check your input")
}
}
best("TX","heart attack")
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
return(state, outcome)
}
else {
print("please check your input")
}
}
best("TX","heart attack")
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
return(state)
return(outcome)
}
else {
print("please check your input")
}
}
best("TX","heart attack")
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
#return(state)
return(outcome)
}
else {
print("please check your input")
}
}
best("TX","heart attack")
source('~/Github/datasciencecoursera/best.R', echo=TRUE)
best <- function(state, outcome) {
data <- read.csv("C:/users/cclerc/documents/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
outcomelist <- c("heart attack", "heart failure", "pneumonia")
if (state %in% statelist & outcome %in% outcomelist) {
return(state)
#return(outcome)
}
else {
print("please check your input")
}
}
best("WZ","heart attack")
best("WA","heat attack")
best("WA","heart attack")
=======
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[num]
}
}
else if (!(state %in% statelist)) {
stop("invalid state")
}
else if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
}
rm(ro)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
o
>>>>>>> 6c71d6de5a95f5613e748925003f9b54f3a99116:3.2.17.Rhistory
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
head(restData)
head(restData)
tail(restData)
head(restData)
tail(restData)
str(restData))
summary(restData)
head(restData)
tail(restData)
str(restData)
summary(restData)
?table
?tables
tables()
table(restData$name, restData$neighborhood, restData$policeDistrict, restData$Location.1)
table(restData$name)
table(restData$neighborhood)
table(restData$policeDistrict)
table(restData$Location.1)
table(restData$name >=2)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
quantile(restData$councilDistrict, probs = c(0.1,0.75,0.9))
quantile(restData$councilDistrict, probs = c(0.5,0.75,0.9))
table(restData$zipCode, useNA = "ifany")
quantile(restData$councilDistrict, na.rm = TRUE)
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData)))
all(colSums(is.na(restData)) == 0)
table(restData$zipCode %in% c("21212"))
restData[restData$zipCode %in% c("21212")]
restData[restData$zipCode %in% c("21212"),]
restData[restData$zipCode %in% c("21212", "21213"),]
head(restData[restData$zipCode %in% c("21212", "21213"),])
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data = DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt <- xtabs(breaks ~ ., data = warpbreaks)
xt
ftable(xt)
fakedata = rnorm(1e5)
object.size(fakedata)
print(object.size(fakedata), units = "Mb")
rm(list=ls())
restData <- read.csv("./data/restaurants.csv")
s1 <- seq(1:10, by=2); s1
s2 <- seq(1:10, length=3); s2
x <- c(1,3,8,25,100); seq(along = x)
s1 <- seq(1,10, by=2); s1
s2 <- seq(1,10, length=3); s2
restData$nearme = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearme)
restData$zipwrong = ifelse(restData$zipCode <0 , TRUE, FALSE)
table(restData$zipwrong)
table(restData$zipwrong, restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode, breaks = quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode, g = 4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf
class(restData$zcf)
restData$zcf[1:10]
class(restData$zcf)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes","no"), size = 10, replace = TRUE)
yesnofac = factor(yesno, levels = c("yes","no"))
relevel(yesnofac, ref ref = "yes")
relevel(yesnofac, ref = "yes")
as.numeric(yesnofac)
library(plyr)
restData2 = mutate(restData, zipGroups = cut2(zipCode, g = 4))
table(restData2$zipGroups)
View(restData2)
library(reshape2)
head(mtcars)
mtcars$carname = rownames(mtcars)
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt, n = 3)
tail(carMelt, n = 3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
ddply(InsectSprays,.(spray),summarize,sum = sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
detach(c("plyr","dplyr"))
detach(plyr)
ddply(InsectSprays,.(spray),plyr::summarize,sum = sum(count))
spraySums <- ddply(InsectSprays, .(spray), plyr::summarize, sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
ddply(InsectSprays,.(spray),plyr::summarize,sum = sum(count))
dim(spraySums)
dim(InsectSprays)
rm(list=ls())
<<<<<<< HEAD:.Rhistory
library(swirl)
?swirl_options
swirl::install_course()
?swirl:::InstallCourses
swirl::install_course("Getting_and_Cleaning_Data")
swirl()
mydf <- read.csv("path2csv.csv, stringsAsFactors = FALSE")
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm
("mydf")
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,1(X:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filer(cran, r_ver == "3.3.1", coun == "US")
filter(cran, r_ver == "3.3.1", coun == "US")
filter(cran, r_version == "3.3.1", counnt == "US")
filter(cran, r_version == "3.3.1", country == "US")
filter(cran, r_version == "3.3.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == US | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filteR(cran, !is.na(r_version))
filter(cran, !is.na(r_version))
=======
rankhospital <- function(state, outcome, num = "best") {
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
if (state %in% statelist & outcome == "heart attack") {
x <- subset(data[,c(2,11)], data[,7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
if (num == "best" | num == 1) {
o[1,1]
}
else if (num == "worst" | num == nrow(o)) {
o[1,nrow(o)]
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[1,num]
}
}
else if (state %in% statelist & outcome == "heart failure") {
x <- subset(data[ , c(2, 17)], data[ , 7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
if (num == "best" | num == 1) {
o[1,1]
}
else if (num == "worst" | num == nrow(o)) {
o[1,nrow(o)]
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[1,num]
}
}
else if (state %in% statelist & outcome == "pneumonia") {
x <- subset(data[,c(2,23)], data[,7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
if (num == "best" | num == 1) {
o[1,1]
}
else if (num == "worst" | num == nrow(o)) {
o[,1nrow(o)]
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[1,num]
}
}
else if (!(state %in% statelist)) {
stop("invalid state")
}
else if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
}
rankhospital <- function(state, outcome, num = "best") {
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
statelist <- data[,7]
if (state %in% statelist & outcome == "heart attack") {
x <- subset(data[,c(2,11)], data[,7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
if (num == "best" | num == 1) {
o[1,1]
}
else if (num == "worst" | num == nrow(o)) {
o[1,nrow(o)]
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[1,num]
}
}
else if (state %in% statelist & outcome == "heart failure") {
x <- subset(data[ , c(2, 17)], data[ , 7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
if (num == "best" | num == 1) {
o[1,1]
}
else if (num == "worst" | num == nrow(o)) {
o[1,nrow(o)]
}
else if (num < 1 | num > nrow(o)) {
print("NA")
}
else {
o[1,num]
}
}
else if (state %in% statelist & outcome == "pneumonia") {
x <- subset(data[,c(2,23)], data[,7] == state)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
x <- subset(data[,c(2,11)], data[,7] == "TX")
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
o[1,1]
o[1,nrow(o)]
o[1,NROW(o)]
o[1,length(o)]
class(dt$name)
class(dt[,1])
i <- sapply(dt1, is.factor)
i
bob[i] <- lapply(bob[i], as.character)
dt1[i] <- lapply(dt1[i], as.character)
i
dt1
class(dt1[,1])
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
rm(list=ls())
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
x <- subset(data[,c(2,11)], data[,7] == "TX")
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
o[nrow[o]]
o[nrow[o$V1]]
o[1,v1
]
o[1,o$v1]
subset(o,v1)
subset(o,$v1)
subset(o,o$v1)
subset(o,V1)
subset(o,(1,V1)
subset(o,(1,V1))
subset(o,o[1,V1])
which(o$rank == 1)
dt1 <- as.matrix.data.frame(dt[complete.cases(dt), ])
dt1$rank <- NA
dt1 <- as.data.frame(dt[complete.cases(dt), ])
dt1[i] <- lapply(dt1[i], as.character)
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
o1 <- as.matrix(o)
o1[1]
o1[nrow(o1)]
rm(list=ls())
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
which(01$rank == 4)
which(01[,3] == 4)
which(o1[,3] == 4)
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
x <- subset(data[ , c(2, 17)], data[ , 7] == "TX")
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "min")
o1 <- as.matrix(o)
which(o1[,3] == 4)
which(grepl(4, o1[,3]))
o1[,3]
View(o1)
?rank
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "max")
o1 <- as.matrix(o)
View(o1)
dt <- cbind(x[ , 1],as.numeric(x[ , 2]))
dt1 <- as.data.frame(dt[complete.cases(dt), ])
i <- sapply(dt1, is.factor)
dt1[i] <- lapply(dt1[i], as.character)
dt1$rank <- NA
o <- dt1[order(dt1[,2], dt1[,1]),]
o$rank <- rank(o[,2], ties.method = "dense")
o1 <- as.matrix(o)
View(o1)
rm(list=ls())
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death]
statelist <- data[data$State == state, c("Hospital.Name", death)]
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
outcome <- "heart attack"
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
state <- "TX"
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
statelist
rm(list=ls())
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
source('C:/Users/Christian/Github/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX", "heart failure", 4)
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
if(nrow(statelist) == 0) {
stop("invalid state")
}
statelist[,2] <- as.numeric(statelist[,2])
ordered_statelist <- order(statelist[death], statelist$Hospital.Name, na.last=NA)
state <- "TX"
outcome <- "heart failure"
num <- 4
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
if(nrow(statelist) == 0) {
stop("invalid state")
}
statelist[,2] <- as.numeric(statelist[,2])
ordered_statelist <- order(statelist[death], statelist$Hospital.Name, na.last=NA)
data <- read.csv("C:/users/christian/github/datasciencecoursera/outcome-of-care-measures.csv", colClasses = "character")
death <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == 'pneumonia') {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
statelist <- data[data$State == state, c("Hospital.Name", death)]
if(nrow(statelist) == 0) {
stop("invalid state")
}
statelist[,2] <- as.numeric(statelist[,2])
ordered_statelist <- order(statelist[death], statelist$Hospital.Name, na.last=NA)
View(statelist)
view(ordered_statelist)
ordered_statelist
>>>>>>> 6ddad96f0c0eff92c87589b57666bfb89249a853
>>>>>>> 6c71d6de5a95f5613e748925003f9b54f3a99116:3.2.17.Rhistory
